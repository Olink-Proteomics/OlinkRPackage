% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_npx.R
\name{clean_assay_na}
\alias{clean_assay_na}
\title{Main function -----------------------------------------------------------}
\usage{
clean_assay_na(df, check_npx_log, out_df = "tibble")
}
\arguments{
\item{df}{A data frame loads from \code{read_npx()}, including a column identified
by \code{check_npx_log$col_names$olink_id}.}

\item{check_npx_log}{A list generated by \code{check_npx()} function, containing:
\itemize{
\item \code{assay_na}: a character vector of \code{OlinkID} to be excluded.
\item \code{col_names$olink_id}: the column name in \code{df} that holds the \code{OlinkID}.
}}

\item{out_df}{Output format of the cleaned data. Options: \code{"tibble"} (default)
or \code{"arrow"}.}
}
\value{
A filtered data frame with rows corresponding to NA-only
assays removed.
}
\description{
This function filters out rows from a data frame where the assay
identifier (e.g.,\code{OlinkID}) matches those listed in \code{check_npx_log$assay_na},
which contains assays composed entirely of NA values. It uses CLI messaging
to report which assays were removed.
}
\section{Step 1: Remove excluded normalization assays ----}{
df <- clean_failed_assay(df)
}

\section{Step 2: Remove sample type controls (if SampleType present) ----}{
df <- clean_sample_type_controls(df, check_npx_out_list)
}

\section{Step 3: Remove sample ID controls ----}{
df <- clean_sample_id_controls(df, check_npx_out_list)
}

\section{Step 4: Remove failed QC ----}{

}

\section{Support function --------------------------------------------------------}{

}

\section{Check input ----}{
check_is_dataset(df = df,
error = TRUE)

check_is_dataset(df = df,
error = TRUE)

check_is_dataset(df = df, error = TRUE)
}

\section{Safely access sample_id from col_names ----}{
if (!"sample_id" \%in\% names(check_npx_out_list$col_names)) {
cli::cli_warn(c(
"No column name found for {.var sample_id} in {.code check_npx_out_list}.",
"i" = "Returning data unchanged."
))
return(df)
}

col_sample_id <- check_npx_out_list$col_names$sample_id
}

\section{Check if column exists in data ----}{
if (!col_sample_id \%in\% colnames(df)) {
cli::cli_warn(c(
"Column {.var {col_sample_id}} not found in data.",
"i" = "Returning data unchanged."
))
return(df)
}
}

\section{Identify rows containing 'control' ----}{
control_idx <- stringr::str_detect(df[\link{col_sample_id}],
regex("control", ignore_case = TRUE))
n_controls <- sum(control_idx, na.rm = TRUE)
}

\section{Inform user ----}{
cli::cli_inform("Removing {n_controls} row{?s} with {.var {col_sample_id}}
containing 'control' (case-insensitive).")

cli::cli_inform("Removing {n_controls} row{?s} with {.var {col_sample_type}}
in {toString(control_types)}.")
}

\section{Filter and return ----}{
cleaned_df <- df\link{!control_idx, }
return(cleaned_df)
}

#' @title Clean Control Samples Based on SampleType
#'
#' @description
#' Removes rows from an NPX dataset where SampleType indicates control samples.
#' These include: "SAMPLE_CONTROL", "PLATE_CONTROL", and "NEGATIVE_CONTROL".
#'
#' @author
#'  Kang Dong
#'
#' @param df A data.frame or tibble.
#' @param check_npx_out_list A list returned from \code{check_npx()}
#' with column name mapping.
#'
#' @return A filtered data.frame or tibble.
#'
#' @export
clean_sample_type_controls <- function(df, check_npx_out_list) {

cleaned_df <- df\link{!control_idx, }
return(cleaned_df)
}

#' @title Clean Samples That Failed QC
#'
#' @description
#' Removes samples from NPX data where the SampleQC column equals "FAIL"
#' (case-insensitive). Also logs a summary of all SampleQC statuses present
#' in the dataset.
#'
#' @author
#'  Kang Dong
#'
#' @param df A data.frame or tibble containing NPX data.
#' @param check_npx_out_list A list returned from \code{check_npx()}
#' containing standardized column names.
#'
#' @return A filtered data.frame or tibble with samples failing QC removed.
#'
#' @examples
#' clean_data <- clean_qc_warning(npx_data, check_npx_out_list)
#'
#' @export
clean_qc_warning <- function(df, check_npx_out_list) {
}

\section{Safely access sample_type from col_names ----}{
if (!"sample_type" \%in\% names(check_npx_out_list$col_names)) {
cli::cli_warn(c(
"No column name found for {.var sample_type} in
{.code check_npx_out_list}.",
"i" = "Returning data unchanged."
))
return(df)
}

col_sample_type <- check_npx_out_list$col_names$sample_type
}

\section{Check if column is in the actual data ----}{
if (!col_sample_type \%in\% colnames(df)) {
cli::cli_warn(c(
"Column {.var {col_sample_type}} not found in data.",
"i" = "Returning data unchanged."
))
return(df)
}
}

\section{Filter out rows ----}{
control_types <- c("SAMPLE_CONTROL", "PLATE_CONTROL", "NEGATIVE_CONTROL")
control_idx <- df[\link{col_sample_type}] \%in\% control_types
n_controls <- sum(control_idx, na.rm = TRUE)
}

\section{Get column name for qc_warning ----}{
if (!"qc_warning" \%in\% names(check_npx_out_list$col_names)) {
cli::cli_warn(c(
"No column name found for {.var qc_warning} in
{.code check_npx_out_list}.",
"i" = "Returning data unchanged."
))
return(df)
}

col_qc_warning <- check_npx_out_list$col_names$qc_warning
}

\section{Check if the qc_warning column exists ----}{
if (!col_qc_warning \%in\% colnames(df)) {
cli::cli_warn(c(
"Column {.var {col_qc_warning}} not found in data.",
"i" = "Returning data unchanged."
))
return(df)
}
}

\section{Summarize SampleQC statuses ----}{
qc_summary <- table(
toupper(trimws(df[\link{col_qc_warning}])),
useNA = "ifany")
qc_summary_msg <- paste(names(qc_summary),
qc_summary,
sep = ": ", collapse = "; ")
cli::cli_inform("SampleQC status summary â€” {qc_summary_msg}")
}

\section{Identify failed samples ----}{
fail_idx <- stringr::str_detect(df[\link{col_qc_warning}],
regex("^FAIL$", ignore_case = TRUE))
n_fail <- sum(fail_idx, na.rm = TRUE)
}

\section{Inform user and remove ----}{

}

\examples{
# Assuming df is a valid NPX-like data frame with an "OlinkID" column,
# and check_npx_log is a list with assay_na and col_names$olink_id
clean_df <- clean_assay_na(df, check_npx_log)

}
