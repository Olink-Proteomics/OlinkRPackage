% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_npx.R
\name{clean_npx}
\alias{clean_npx}
\title{Function Cleaning NPX data}
\usage{
clean_npx(
  df,
  check_log = NULL,
  preferred_names = NULL,
  control_sample_ids = NULL,
  remove_assay_na = TRUE,
  remove_invalid_oid = TRUE,
  remove_dup_sample_id = TRUE,
  remove_control_assay = TRUE,
  remove_control_sample = TRUE,
  remove_qc_warning = FALSE,
  remove_assay_warning = TRUE,
  out_df = "tibble",
  verbose = FALSE
)
}
\arguments{
\item{df}{A \code{tibble} or Arrow \code{Table} loaded from \code{read_npx()}.}

\item{check_log}{A list returned by \code{\link[=check_npx]{check_npx()}}. If \code{NULL},
\code{check_npx()}will be run internally using \code{df} and \code{preferred_names}.}

\item{preferred_names}{An optional named list to supply preferred column
names to \code{check_npx()}, if \code{check_log} is not provided.}

\item{control_sample_ids}{A character vector of \code{SampleID}s to remove.
Typically used to remove customer-provided or technical control samples.}

\item{out_df}{Output format: \code{"tibble"} (default) or \code{"arrow"}.}

\item{verbose}{Logical. If \code{FALSE} (default), Silences step-wise CLI
messages.}

\item{keep_controls}{Character string indicating whether to retain any
controls:
\itemize{
\item \code{"sample"}: keep only sample-level controls,
\item \code{"assay"}: keep only assay-level controls,
\item \code{"both"}: keep all controls,
\item \code{NULL} (default): remove all controls.
}}
}
\value{
A cleaned NPX dataset in either tibble or Arrow Table format,
depending on \code{out_df}.
}
\description{
This function applies a series of cleaning steps to an NPX data based on
the results from \code{\link[=check_npx]{check_npx()}}. It removes problematic samples and assays
to prepare a clean NPX data for downstream analysis, including duplicates
samples, controls samples, internal control assays, and samples or assays
with QC flag. Additionally, an instruction message is printed when user plan
to analyze absolute quantification value.

The cleaning pipeline performs the following steps:
\enumerate{
\item \strong{Remove invalid Olink IDs}: Assays flagged as having invalid Olink IDs.
\item \strong{Remove assays with all NA values}: Assays without quantifiable data.
\item \strong{Remove duplicate Sample IDs}: Ensures uniqueness across samples.
\item \strong{Remove control samples}:
\itemize{
\item Based on \code{SampleType} (e.g., \code{"SAMPLE_CONTROL"}, \code{"PLATE_CONTROL"},
\code{"NEGATIVE_CONTROL"}).
\item Based on \code{SampleID} matching known control sample IDs.
}
\item \strong{Remove samples failing QC}: Samples with QC status \code{'FAIL'}.
\item \strong{Remove internal control assays}: Based on \code{AssayType} (e.g.,
\code{"ext_ctrl"}, \code{"inc_ctrl"}, \code{"amp_ctrl"}).
\item \strong{Remove assays flagged with assay QC warnings}.
\item \strong{Correct column class}: Ensures columns following expected column class
defined in \code{column_name_dict}.
}

#' If the dataset includes absolute quantification, a message is shown
recommending log2 transformation for downstream analysis.
}
\examples{
\dontrun{
# Example 1. Run clean_npx() to check multiple errors
df <- dplyr::tibble(
  SampleID = c(
    "ValidSample",     # valid
    "InvalidOID",      # invalid OlinkID (too short)
    "AllNA",           # all NPX values NA for assay
    "DuplicateSample", # duplicate SampleID
    "ControlType",     # control SampleType
    "ControlID",       # control SampleID (e.g., contains 'control')
    "FailQC",          # QC_Warning is FAIL
    "ControlAssay",    # internal control assay
    "AssayWarn",       # flagged by AssayQC warning
    "DuplicateSample"  # duplicate SampleID
  ),
 OlinkID = c(
    "OID12345",  # valid (5 digits)
    "OID1234",   # invalid (only 4 digits)
    "OID23456",  # valid, but will be all NA
    "OID34567",  # valid
    "OID45678",  # valid
    "OID56789",  # valid
    "OID67890",  # valid
    "OID78901",  # valid
    "OID89012",  # valid
    "OID34567"   # valid
  ),
  SampleType = c(
    "SAMPLE",
    "SAMPLE",
    "SAMPLE",
    "SAMPLE",
    "PLATE_CONTROL",  # control sample
    "SAMPLE",
    "SAMPLE",
    "SAMPLE",
    "SAMPLE",
    "SAMPLE"
  ),
  AssayType = c(
    "assay",
    "assay",
    "assay",
    "assay",
    "assay",
    "assay",
    "assay",
    "ext_ctrl",   #control assay
    "assay",
    "assay"
  ),
  SampleQC = c(
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "FAIL",    #fails QC
    "PASS",
    "PASS",
    "PASS"
  ),
 AssayQC = c(
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "PASS",
    "WARN", #to be removed by clean_assay_warning
    "PASS"
  ),
   NPX = replace(x = rnorm(n = 10L), list = 3L, values = NA_real_),
   PlateID = rep("plate1", 10L),
   UniProt = rep("uniprotid1", 10L),
   Assay = rep("assay_a", 10L),
   Panel = rep("panel_a", 10L),
   PanelVersion = rep("panel_version_a", 10L),
   LOD = rnorm(10L),
   ExtNPX = rnorm(10L),
   Count = rnorm(10L),
   Normalization = rep("Intensity", 10L)
)
}

}
\author{
Kang Dong
Klev Diamanti
}
